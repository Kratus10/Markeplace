
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  password: 'password',
  emailVerified: 'emailVerified',
  image: 'image',
  bio: 'bio',
  gender: 'gender',
  location: 'location',
  birthday: 'birthday',
  occupation: 'occupation',
  tradingExperience: 'tradingExperience',
  avatar: 'avatar',
  role: 'role',
  status: 'status',
  kycVerified: 'kycVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  slug: 'slug',
  description: 'description',
  currentVersion: 'currentVersion',
  price: 'price',
  currency: 'currency',
  status: 'status',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModerationQueueItemScalarFieldEnum = {
  id: 'id',
  status: 'status',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LicenseScalarFieldEnum = {
  id: 'id',
  key: 'key',
  userId: 'userId',
  productId: 'productId',
  issuedAt: 'issuedAt',
  expiresAt: 'expiresAt',
  revokedAt: 'revokedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DownloadScalarFieldEnum = {
  id: 'id',
  licenseId: 'licenseId',
  createdAt: 'createdAt',
  ipAddress: 'ipAddress'
};

exports.Prisma.ProfileVisibilityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  showRole: 'showRole',
  showLocation: 'showLocation',
  showOccupation: 'showOccupation',
  showBirthday: 'showBirthday',
  showTradingExperience: 'showTradingExperience',
  showAvatar: 'showAvatar'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  icon: 'icon',
  color: 'color',
  order: 'order'
};

exports.Prisma.TradingSignalScalarFieldEnum = {
  id: 'id',
  title: 'title',
  symbol: 'symbol',
  action: 'action',
  entry: 'entry',
  takeProfit: 'takeProfit',
  stopLoss: 'stopLoss',
  confidence: 'confidence',
  description: 'description',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planType: 'planType',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  autoRenew: 'autoRenew',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  category: 'category',
  active: 'active',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailVersionScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  subjectTemplate: 'subjectTemplate',
  htmlTemplate: 'htmlTemplate',
  textTemplate: 'textTemplate',
  variables: 'variables',
  providerOverrides: 'providerOverrides',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  userId: 'userId',
  categoryId: 'categoryId',
  status: 'status',
  views: 'views',
  likes: 'likes',
  shareCount: 'shareCount',
  isPinned: 'isPinned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  userId: 'userId',
  topicId: 'topicId',
  parentId: 'parentId',
  likes: 'likes',
  shareCount: 'shareCount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModerationLogScalarFieldEnum = {
  id: 'id',
  moderatorId: 'moderatorId',
  targetType: 'targetType',
  targetId: 'targetId',
  action: 'action',
  reason: 'reason',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EngagementEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  targetType: 'targetType',
  targetId: 'targetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EarningsLedgerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amountCents: 'amountCents',
  currency: 'currency',
  sourceType: 'sourceType',
  sourceId: 'sourceId',
  status: 'status',
  payoutId: 'payoutId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityId: 'entityId',
  entityType: 'entityType',
  entityName: 'entityName',
  status: 'status',
  details: 'details',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  provider: 'provider',
  amountCents: 'amountCents',
  currency: 'currency',
  status: 'status',
  transactionId: 'transactionId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  amountCents: 'amountCents',
  currency: 'currency',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  subject: 'subject',
  content: 'content',
  isPremium: 'isPremium',
  readAt: 'readAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UploadScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fileName: 'fileName',
  fileSize: 'fileSize',
  fileType: 'fileType',
  sha256: 'sha256',
  status: 'status',
  scanReportKey: 'scanReportKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  orderId: 'orderId',
  rating: 'rating',
  title: 'title',
  content: 'content',
  status: 'status',
  helpfulYes: 'helpfulYes',
  helpfulNo: 'helpfulNo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductVersionScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  version: 'version',
  name: 'name',
  description: 'description',
  fileHash: 'fileHash',
  fileSize: 'fileSize',
  status: 'status',
  changelog: 'changelog',
  isLatest: 'isLatest',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SiteSettingsScalarFieldEnum = {
  key: 'key',
  value: 'value'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Product: 'Product',
  ModerationQueueItem: 'ModerationQueueItem',
  License: 'License',
  Download: 'Download',
  ProfileVisibility: 'ProfileVisibility',
  Category: 'Category',
  TradingSignal: 'TradingSignal',
  Subscription: 'Subscription',
  EmailTemplate: 'EmailTemplate',
  EmailVersion: 'EmailVersion',
  Topic: 'Topic',
  Comment: 'Comment',
  ModerationLog: 'ModerationLog',
  EngagementEvent: 'EngagementEvent',
  EarningsLedger: 'EarningsLedger',
  AuditLog: 'AuditLog',
  Payment: 'Payment',
  Order: 'Order',
  Message: 'Message',
  Upload: 'Upload',
  Review: 'Review',
  ProductVersion: 'ProductVersion',
  SiteSettings: 'SiteSettings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
