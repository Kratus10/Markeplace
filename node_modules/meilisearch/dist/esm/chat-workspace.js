/**
 * Class for handling chat workspaces.
 *
 * @see {@link https://www.meilisearch.com/docs/reference/api/chats}
 */
export class ChatWorkspace {
    #httpRequest;
    #workspace;
    constructor(httpRequests, workspace) {
        this.#httpRequest = httpRequests;
        this.#workspace = workspace;
    }
    /**
     * Get the settings of a chat workspace.
     *
     * @experimental
     * @see {@link https://www.meilisearch.com/docs/reference/api/chats#get-chat-workspace-settings}
     */
    async get() {
        return await this.#httpRequest.get({
            path: `chats/${this.#workspace}/settings`,
        });
    }
    /**
     * Update the settings of a chat workspace.
     *
     * @experimental
     * @see {@link https://www.meilisearch.com/docs/reference/api/chats#update-chat-workspace-settings}
     */
    async update(settings) {
        return await this.#httpRequest.patch({
            path: `chats/${this.#workspace}/settings`,
            body: settings,
        });
    }
    /**
     * Reset the settings of a chat workspace.
     *
     * @experimental
     * @see {@link https://www.meilisearch.com/docs/reference/api/chats#reset-chat-workspace-settings}
     */
    async reset() {
        await this.#httpRequest.delete({
            path: `chats/${this.#workspace}/settings`,
        });
    }
    /**
     * Create a chat completion using an OpenAI-compatible interface.
     *
     * @experimental
     * @see {@link https://www.meilisearch.com/docs/reference/api/chats#chat-completions}
     */
    async streamCompletion(completion) {
        if (!completion.stream) {
            throw new Error("The SDK only supports streaming");
        }
        return await this.#httpRequest.postStream({
            path: `chats/${this.#workspace}/chat/completions`,
            body: completion,
        });
    }
}
//# sourceMappingURL=chat-workspace.js.map